// -----------------------------------------------------------------------------
// Vendor: Icons template & icons
// Template
//  • used by the build.iconFont task in the gulpfile
//  • the task generates the icon font font-face, mixins, function, and classes
// Compiled
//  • for use in vendor/_icons.scss
//  • the font-face declaration and classes are included in the main.scss file
// -----------------------------------------------------------------------------

@mixin icon-font-face() {
  $cachebuster: unique_id();
  @font-face {
    font-family: "<%= fontName %>";
    src: url('<%= fontPath %><%= fontName %>.eot?#{$cachebuster}');
    src: url('<%= fontPath %><%= fontName %>.ttf?#{$cachebuster}') format('truetype'),
    url('<%= fontPath %><%= fontName %>.eot?#{$cachebuster}#iefix') format('eot'),
    url('<%= fontPath %><%= fontName %>.woff?#{$cachebuster}') format('woff');
  }
}

@mixin <%= cssClass%>-styles {
  font-family: "<%= fontName %>";
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-style: normal;
  font-variant: normal;
  font-weight: normal;
  // speak: none; // only necessary if not using the private unicode range (firstGlyph option)
  text-decoration: none;
  text-transform: none;
}

%<%= cssClass%> {
  @include <%= cssClass%>-styles;
}

@function <%= cssClass%>-char($filename) {
  $char: "";
  <% _.each(glyphs, function(glyph) { %>
    @if $filename == <%= glyph.fileName %> {
      $char: "\<%= glyph.codePoint %>";
    }
  <% }); %>

  @return $char;
}

@mixin <%= cssClass%>($filename, $insert: before, $extend: true) {
  &:#{$insert} {
    @if $extend {
      @extend %<%= cssClass%>;
    } @else {
      @include <%= cssClass%>-styles;
    }
    content: <%= cssClass%>-char($filename);
  }
}

$icons: (
  <% _.each(glyphs, function(glyph) { %>
    <%= glyph.fileName %>: <%= glyph.originalFileName ? glyph.originalFileName : glyph.fileName %>,
  <% }); %>
);
